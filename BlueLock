-- script
























































-- Check if we're in Roblox environment
if not game or not game:GetService then
    print("Not in Roblox environment - exiting")
    return
end

warn = function() end
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local Window = Fluent:CreateWindow({
    Title = "Blue Lock",
    SubTitle = "Nexus Script Hub",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 340),
    Acrylic = false,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    KeySys = Window:AddTab({ Title = "Key System", Icon = "key" }),
}

local key = "" -- Initialize key variable

local Entkey = Tabs.KeySys:AddInput("Input", {
    Title = "Enter Key",
    Description = "Enter Key Here",
    Default = "",
    Placeholder = "Enter keyâ€¦",
    Numeric = false,
    Finished = false,
    Callback = function(Value)
        key = Value
    end
})

local Checkkey = Tabs.KeySys:AddButton({
    Title = "Check Key",
    Description = "Enter Key before pressing this button",
    Callback = function()
        if key == "" then
            Fluent:Notify({
                Title = "Error",
                Content = "Please enter a key first!",
                Duration = 3.5
            })
            return
        end
        
        local success, response = pcall(function() 
            return game:HttpGet("https://work.ink/_api/v2/token/isValid/"..key)
        end)
        
        if success and response and response:find('"valid":true') then
            Fluent:Notify({
                Title = "Successfully Authenticated",
                Content = "Loading Script...",
                Duration = 5
            })    
            print("Key is Authenticated")
            Fluent:Destroy()

            -- Load necessary libraries
            local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
            local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
            local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
            
            -- Create the main window
            local Window = Fluent:CreateWindow({
                Title = "Blue Lock",
                SubTitle = "Nexus. Script Hub",
                TabWidth = 160,
                Size = UDim2.fromOffset(580, 340),
                Acrylic = false,
                Theme = "Dark",
                MinimizeKey = Enum.KeyCode.LeftControl
            })
            
            -- Create Tabs
            local Tabs = {
                Style = Window:AddTab({ Title = "Style", Icon = "home" }),
                Flow = Window:AddTab({ Title = "Flow", Icon = "fire" }),
                Extra = Window:AddTab({ Title = "Extra", Icon = "gift" }),
                Misc = Window:AddTab({ Title = "Misc", Icon = "cloud" }),
                Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
            }
            
            Window:SelectTab(Tabs.Style)

            local CopyDiscord = Tabs.Style:AddButton({
                Title = "Kaiser",
                Description = "",
                Callback = function()
                    game:GetService("Players").LocalPlayer.PlayerStats.Style.Value = "Kaiser"
                end
            })
            
            local CopyDiscord = Tabs.Style:AddButton({
                Title = "Sae",
                Description = "",
                Callback = function()
                    game:GetService("Players").LocalPlayer.PlayerStats.Style.Value = "Sae"
                end
            })
            
            local CopyDiscord = Tabs.Style:AddButton({
                Title = "Don Lorenzo",
                Description = "",
                Callback = function()
                    game:GetService("Players").LocalPlayer.PlayerStats.Style.Value = "Don Lorenzo"
                end
            })
            
            local CopyDiscord = Tabs.Style:AddButton({
                Title = "Nel Isagi",
                Description = "",
                Callback = function()
                    game:GetService("Players").LocalPlayer.PlayerStats.Style.Value = "NEL Isagi"
                end
            })

            local CopyDiscord = Tabs.Style:AddButton({
                Title = "Bachira",
                Description = "",
                Callback = function()
                    game:GetService("Players").LocalPlayer.PlayerStats.Style.Value = "NEL Bachira"
                end
            })
            
            local CopyDiscord = Tabs.Style:AddButton({
                Title = "Shidou",
                Description = "",
                Callback = function()
                    game:GetService("Players").LocalPlayer.PlayerStats.Style.Value = "Shidou"
                end
            })

            local CopyDiscord = Tabs.Flow:AddButton({
                Title = "Awakened Genius",
                Description = "",
                Callback = function()
                    game:GetService("Players").LocalPlayer.PlayerStats.Flow.Value = "Awakened Genius"
                end
            })
            
            local CopyDiscord = Tabs.Flow:AddButton({
                Title = "Emperor",
                Description = "",
                Callback = function()
                    game:GetService("Players").LocalPlayer.PlayerStats.Flow.Value = "Emperor"
                end
            })

            local CopyDiscord = Tabs.Flow:AddButton({
                Title = "Soul Harvester",
                Description = "",
                Callback = function()
                    game:GetService("Players").LocalPlayer.PlayerStats.Flow.Value = "Soul Harvester"
                end
            })

            local CopyDiscord = Tabs.Flow:AddButton({
                Title = "Prodigy",
                Description = "",
                Callback = function()
                    game:GetService("Players").LocalPlayer.PlayerStats.Flow.Value = "Prodigy"
                end
            })

            local CopyDiscord = Tabs.Flow:AddButton({
                Title = "Dribbler",
                Description = "",
                Callback = function()
                    game:GetService("Players").LocalPlayer.PlayerStats.Flow.Value = "Dribbler"
                end
            })

            local codesEnabled = false
            
            Tabs.Extra:AddToggle("dfn Toggle", {
                Title = "Auto Claim Codes",
                Description = "",
                Default = false, -- Default is off
                Callback = function(State)
                    codesEnabled = State
            
                    if codesEnabled then
                        print("Auto Claim Codes Enabled!")
            
                        while codesEnabled do
                            local codes = { "BACHIRA!!", "REVAMP!"}
            
                            for _, code in ipairs(codes) do
                                local args = {
                                    [1] = code
                                }
                            
                                game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("CodesService"):WaitForChild("RF"):WaitForChild("Redeem"):InvokeServer(unpack(args))
                            end                
                            wait(25)  -- Adjust the wait time for the frequency of spam (e.g., 0.1 seconds)
                        end
                    end
                end
            })

            local CopyDiscord = Tabs.Extra:AddButton({
                Title = "Always Awakened",
                Description = "",
                Callback = function()
                    game:GetService("Players").LocalPlayer.PlayerStats.InAwakening.Value = true
                end
            })

            local saenabled = false
            
            Tabs.Extra:AddToggle("dfn Toggle", {
                Title = "Always Awakened",
                Description = "",
                Default = false, -- Default is off
                Callback = function(State)
                    saenabled = State
            
                    if saenabled then
                        print("Enabled Awakening!")
            
                        while saenabled do
                            game:GetService("Players").LocalPlayer.PlayerStats.InAwakening.Value = true
                            wait(1)  -- Adjust the wait time for the frequency of spam (e.g., 0.1 seconds)
                        end
                    else
                        game:GetService("Players").LocalPlayer.PlayerStats.InAwakening.Value = false
                    end
                end
            })

            local CopyDiscord = Tabs.Extra:AddButton({
                Title = "Free VIP",
                Description = "",
                Callback = function()
                    game:GetService("Players").LocalPlayer.HasVIP.Value = true
                end
            })              
            
            local MiscTab = Tabs.Misc
            
            MiscTab:AddInput("Input", { -- Using AddInput with "Input" type
                Title = "Walkspeed",
                Description = "Set Custom Walkspeed", 
                Default = "",
                Placeholder = "Set Walkspeed", 
                Numeric = true, -- Set to true for numeric input
                Finished = false,
                Callback = function(Value)
                    local walkspeed = tonumber(Value) 
                    if walkspeed then
                        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = walkspeed
                    end
                end
            })
            
            MiscTab:AddInput("Input", { -- Using AddInput with "Input" type
                Title = "Jump Power",
                Description = "Set Custom Jump Power",
                Default = "",
                Placeholder = "Set Jump Power",
                Numeric = true, -- Set to true for numeric input
                Finished = false,
                Callback = function(Value)
                    local jumpPower = tonumber(Value)
                    if jumpPower then
                        game.Players.LocalPlayer.Character.Humanoid.JumpPower = jumpPower
                    end
                end
            })

            MiscTab:AddInput("Input", { -- Using AddInput with "Input" type
                Title = "Gravity ",
                Description = "Set Custom Gravity",
                Default = "",
                Placeholder = "Set Gravity ",
                Numeric = true, -- Set to true for numeric input
                Finished = false,
                Callback = function(Value)
                    local gravity = tonumber(Value)
                    if gravity then
                        game.Workspace.Gravity = gravity
                    end
                end
            })
            
            local infJumpEnabled = false -- Variable to store toggle state
            
            MiscTab:AddToggle("Toggle", { -- Using AddToggle with "Toggle" type
                Title = "Infinite Jump",
                Description = "Enable/Disable infinite jump",
                Default = false,
                Callback = function(State)
                    infJumpEnabled = State
            
                    if infJumpEnabled then
                        if _G.infinJumpStarted == nil then
                            _G.infinJumpStarted = true
            
                            local plr = game:GetService('Players').LocalPlayer
                            local m = plr:GetMouse()
            
                            m.KeyDown:connect(function(k)
                                if infJumpEnabled then -- Check the variable here
                                    if k:byte() == 32 then
                                        local humanoid = plr.Character:FindFirstChildOfClass('Humanoid')
                                        if humanoid then
                                            humanoid:ChangeState('Jumping')
                                            wait()
                                            humanoid:ChangeState('Seated')
                                        end
                                    end
                                end
                            end)
                        end
                    end
                end
            })

            SaveManager:SetLibrary(Fluent)
            InterfaceManager:SetLibrary(Fluent)
            SaveManager:IgnoreThemeSettings()
            SaveManager:SetIgnoreIndexes({})
            InterfaceManager:SetFolder("FluentScriptHub")
            SaveManager:SetFolder("FluentScriptHub/specific-game")
            
            InterfaceManager:BuildInterfaceSection(Tabs.Settings)
            SaveManager:BuildConfigSection(Tabs.Settings) 
            Fluent:Notify({
                Title = "Fluent",
                Content = "The script has been loaded.",
                Duration = 3
            })
            SaveManager:LoadAutoloadConfig()
        else
            Fluent:Notify({
                Title = "Error While Authenticating",
                Content = "Invalid Key!",
                Duration = 3.5
            })   
            print("Key is invalid")
        end
    end
})

local Getkey = Tabs.KeySys:AddButton({
    Title = "Get Key",
    Description = "Get Key here",
    Callback = function()
        setclipboard("https://workink.net/1ZcC/BlueLock")
        Fluent:Notify({
            Title = "Copied!",
            Content = "Key link copied to clipboard",
            Duration = 2
        })
    end
})

local CopyDiscord = Tabs.KeySys:AddButton({
    Title = "Copy Discord Link",
    Description = "Get Discord Link here",
    Callback = function()
        setclipboard("https://discord.gg/ZgDUdu2QCa")
        Fluent:Notify({
            Title = "Copied!",
            Content = "Discord link copied to clipboard",
            Duration = 2
        })
    end
})

Window:SelectTab(1)
